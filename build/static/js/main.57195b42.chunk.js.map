{"version":3,"sources":["components/login.component.js","components/upload.component.js","App.js","serviceWorker.js","index.js"],"names":["Login","useState","email","setEmail","password","setPassword","event","a","preventDefault","Auth","signIn","alert","message","onSubmit","className","type","value","placeholder","onChange","e","target","id","htmlFor","disabled","length","href","Upload","accessKey","setAccessKey","secretKey","setSecretKey","bucketName","setBucketName","file","setFile","filename","setFilename","config","dirName","region","accessKeyId","secretAccessKey","handleSubmit","S3FileUpload","uploadFile","then","data","console","log","catch","err","error","multiple","filelists","files","name","App","class","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57195b42.chunk.js","sourcesContent":["import React ,{useState} from \"react\";\r\nimport { Auth } from 'aws-amplify';\r\n\r\n\r\nexport default function Login() {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    function validateForm() {\r\n        return email.length > 0 && password.length > 0;\r\n      }\r\n      async function handleSubmit(event) {\r\n        event.preventDefault();\r\n      \r\n        try {\r\n          await Auth.signIn(email, password);\r\n          alert(\"Logged in\");\r\n        } catch (e) {\r\n          alert(e.message);\r\n        }\r\n      }\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <h3>Sign In</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email address</label>\r\n                    <input type=\"email\" value={email} className=\"form-control\" placeholder=\"Enter email\"  onChange={e => setEmail(e.target.value)}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input type=\"password\" value={password} className=\"form-control\" placeholder=\"Enter password\" onChange={e => setPassword(e.target.value)}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\"  className=\"btn btn-primary btn-block\"disabled={!validateForm()} >Submit</button>\r\n                <p className=\"forgot-password text-right\">\r\n                    Forgot <a href=\"#\">password?</a>\r\n                </p>\r\n            </form>\r\n        );\r\n    \r\n}\r\n","import React ,{useState} from \"react\";\r\nimport S3FileUpload from 'react-s3';\r\n \r\n\r\nexport default function Upload() {\r\n/*  Notice that if you don't provide a dirName, the file will be automatically uploaded to the root of your bucket */\r\nconst [accessKey, setAccessKey] = useState(\"\");\r\nconst [secretKey, setSecretKey] = useState(\"\");\r\nconst [bucketName, setBucketName] = useState(\"\");\r\nconst [file, setFile] = useState([]);\r\nconst [filename, setFilename] = useState('Choose File');\r\nconst [uploadedFile, setUploadedFile] = useState({});\r\nconst [message, setMessage] = useState('');\r\nconst [uploadPercentage, setUploadPercentage] = useState(0);\r\nconst [isLoading, setIsLoading] = useState(false);\r\n\r\nconst config = {\r\n    bucketName: bucketName,\r\n    dirName: 'test', /* optional */\r\n    region: 'ca-central-1',\r\n    accessKeyId: accessKey,\r\n    secretAccessKey: secretKey,\r\n}\r\n\r\nconst onChange = e => {\r\n    let filelists=e.target.files\r\n    setFile(filelists[0]);\r\n    console.log(typeof(filelists[0]))\r\n    console.log(filelists.length)\r\n    console.log(...filelists)\r\n    // console.log(e.target.files[0])\r\n    setFilename(filelists[0].name);\r\n  };\r\nfunction validateForm() {\r\n    return accessKey.length > 0 && secretKey.length > 0 && bucketName && file ;\r\n}\r\nconst handleSubmit = async e => {\r\n    e.preventDefault();\r\n    S3FileUpload\r\n    .uploadFile(file, config)\r\n    .then(data => console.log(data))\r\n    .catch(err => console.error(err))\r\n}\r\n\r\n  return (\r\n    <div>\r\n    <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n            <label>Access Key</label>\r\n            <input type=\"text\" value={accessKey} className=\"form-control\" placeholder=\"Enter Access Key\"  onChange={e => setAccessKey(e.target.value)}/>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label>Secret Key</label>\r\n            <input type=\"text\" value={secretKey} className=\"form-control\" placeholder=\"Enter Secret Key\" onChange={e => setSecretKey(e.target.value)}/>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label>Bucket Name</label>\r\n            <input type=\"text\" value={bucketName}  className=\"form-control\" placeholder=\"Enter Bucket Name\" onChange={e => setBucketName(e.target.value)}/>\r\n        </div>\r\n\r\n        <div className=\"input-group mb-3\">\r\n            <input\r\n                type='file'\r\n                className='custom-file-input'\r\n                id='customFile'\r\n                multiple=\"multiple\"\r\n                onChange={onChange}\r\n            />\r\n            <label className='custom-file-label' htmlFor='customFile'>\r\n                {\r\n                    file.length>1 ?  file.length +' files are chosen' : filename\r\n                }\r\n            </label>               \r\n        </div>\r\n\r\n        <button type=\"submit\"  className=\"btn btn-primary btn-block\" disabled={!validateForm()} >Upload</button>\r\n        \r\n    </form>\r\n    </div>\r\n  \r\n);}","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Login from \"./components/login.component\";\r\nimport Upload from \"./components/upload.component\";\r\n\r\nfunction App() {\r\n\r\n\r\n  \r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>m.DataHub</Link>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">      \r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Login</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/upload\"}>Upload</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route path=\"/sign-in\" component={Login} />\r\n            <Route path=\"/upload\" component={Upload} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}